prototype(Flowpack.SearchPlugin:Search) < prototype(TYPO3.Neos:Content) {
	templatePath = 'resource://Flowpack.SearchPlugin/Private/Templates/NodeTypes/Search.html'

	searchTerm = ${request.arguments.search}
	searchQuery = ${this.searchTerm ? Search.query(site).fulltext(this.searchTerm).nodeType('TYPO3.Neos:Document') : null}

	totalSearchResults = ${this.searchQuery.count()}

	searchForm = Flowpack.SearchPlugin:Search.Form

	configuration = TYPO3.TypoScript:RawArray {
		itemsPerPage = 25
		insertAbove = ${false}
		insertBelow = ${true}
		maximumNumberOfLinks = 10
	}

	searchResultRenderer = TYPO3.TypoScript:Tag {
		tagName = 'ol'
		content = Flowpack.SearchPlugin:SearchResultRenderer
	}
	prototype(Flowpack.SearchPlugin:SingleResult).@process.wrap = ${'<li>' + value + '</li>'}

	@cache {
		mode = 'uncached'
		context {
			1 = 'site'
			2 = 'node'
			3 = 'documentNode'
		}
	}
}


prototype(Flowpack.SearchPlugin:Search.Form) < prototype(TYPO3.TypoScript:Template) {
	node = ${site}

	templatePath = 'resource://Flowpack.SearchPlugin/Private/Templates/NodeTypes/Search.Form.html'
	searchWord = ${request.arguments.search}
}

prototype(Flowpack.SearchPlugin:SearchResultRenderer) < prototype(TYPO3.TypoScript:Collection) {
    // the "searchResults" are filled from the <search:widget.paginate> ViewHelper.
    collection = ${searchResults}
    itemRenderer = Flowpack.SearchPlugin:SingleResult
    itemName = 'node'
    // we also make the full ElasticSearch hit available to nested rendering, if possible
    itemRenderer.@override.searchHit = ${searchResults.searchHitForNode(node)}
}
