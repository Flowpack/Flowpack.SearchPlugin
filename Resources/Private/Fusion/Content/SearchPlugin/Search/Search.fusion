prototype(Flowpack.SearchPlugin:Search) < prototype(Neos.Neos:ContentComponent) {
    searchTerm = ${String.toString(request.arguments.search)}
    @context.searchTerm = ${this.searchTerm}

    searchQuery = ${this.searchTerm ? Search.query(site) : null}
    searchQuery.@process {
        fulltext = ${value ? value.fulltext(request.arguments.search) : value}
        nodeType = ${value ? value.nodeType('Neos.Neos:Document') : value}
        excludeHidden = ${value ? value.exclude('neos_hidden_in_index', true) : value}
    }

    searchForm = Flowpack.SearchPlugin:Search.Form

    attributes = Neos.Fusion:Attributes {
        class = 'search-plugin'
    }

    configuration = Neos.Fusion:DataStructure {
        itemsPerPage = 25
        insertAbove = false
        insertBelow = true
        maximumNumberOfLinks = 10
    }

    renderer = Neos.Fusion:Template {
        attributes = ${props.attributes}
        searchForm = ${props.searchForm}
        searchQuery = ${props.searchQuery}
        configuration = ${props.configuration}

        searchResultRenderer = afx`
            <ol>
                <Flowpack.SearchPlugin:SearchResultRenderer />
            </ol>
        `
        prototype(Flowpack.SearchPlugin:SingleResult).@process.wrap = ${'<li>' + value + '</li>'}

        totalSearchResults = ${this.searchQuery.count()}

        templatePath = 'resource://Flowpack.SearchPlugin/Private/Fusion/Content/SearchPlugin/Search/Search.html'
    }

    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.search || request.arguments.page ? false : 'static'}
        context {
            site = 'site'
            node = 'node'
            documentNode = 'documentNode'
        }
    }
}
