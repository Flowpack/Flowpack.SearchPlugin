prototype(Flowpack.SearchPlugin:Search) < prototype(Neos.Neos:Content) {
    templatePath = 'resource://Flowpack.SearchPlugin/Private/Templates/NodeTypes/Search.html'

    searchTerm = ${request.arguments.search}
    searchQuery = ${this.searchTerm ? Search.query(site).fulltext(this.searchTerm).nodeType('Neos.Neos:Document') : null}

    totalSearchResults = ${this.searchQuery.count()}

    searchForm = Flowpack.SearchPlugin:Search.Form

    configuration = Neos.Fusion:RawArray {
        itemsPerPage = 25
        insertAbove = false
        insertBelow = true
        maximumNumberOfLinks = 10
    }

    searchResultRenderer = Neos.Fusion:Tag {
        tagName = 'ol'
        content = Flowpack.SearchPlugin:SearchResultRenderer
    }
    prototype(Flowpack.SearchPlugin:SingleResult).@process.wrap = ${'<li>' + value + '</li>'}

    @cache {
        mode = 'uncached'
        context {
            1 = 'site'
            2 = 'node'
            3 = 'documentNode'
        }
    }
}

prototype(Flowpack.SearchPlugin:Search.Form) < prototype(Neos.Fusion:Template) {
    node = ${site}

    templatePath = 'resource://Flowpack.SearchPlugin/Private/Templates/NodeTypes/Search.Form.html'
    searchWord = ${request.arguments.search}
}

prototype(Flowpack.SearchPlugin:SearchResultRenderer) < prototype(Neos.Fusion:Collection) {
    // the "searchResults" are filled from the <search:widget.paginate> ViewHelper.
    collection = ${searchResults}
    itemRenderer = Flowpack.SearchPlugin:SingleResult
    itemName = 'node'
    // we also make the full ElasticSearch hit available to nested rendering, if possible
    itemRenderer.@context.searchHit = ${searchResults.searchHitForNode(node)}
}
